# coding: utf-8

# ---
#
# _You are currently looking at **version 1.2** of this notebook. To download notebooks and datafiles, as well as get help on Jupyter notebooks in the Coursera platform, visit the [Jupyter Notebook FAQ](https://www.coursera.org/learn/python-social-network-analysis/resources/yPcBs) course resource._
#
# ---

# # Assignment 4

# In[1]:


import networkx as nx
import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt

# ---
#
# ## Part 1 - Random Graph Identification
#
# For the first part of this assignment you will analyze randomly generated graphs and determine which algorithm created them.

# In[2]:


P1_Graphs = pickle.load(open('A4_graphs', 'rb'))
P1_Graphs


# <br>
# `P1_Graphs` is a list containing 5 networkx graphs. Each of these graphs were generated by one of three possible algorithms:
# * Preferential Attachment (`'PA'`)
# * Small World with low probability of rewiring (`'SW_L'`)
# * Small World with high probability of rewiring (`'SW_H'`)
#
# Anaylze each of the 5 graphs and determine which of the three algorithms generated the graph.
#
# *The `graph_identification` function should return a list of length 5 where each element in the list is either `'PA'`, `'SW_L'`, or `'SW_H'`.*

# In[11]:


# %matplotlib notebook
def graph_identification():
    G_0 = P1_Graphs[0]  # G_0 is PA
    G_1 = P1_Graphs[1]  # G_1 is SW_L
    G_2 = P1_Graphs[2]  # G_2 is SW_L
    G_3 = P1_Graphs[3]  # G_3 is PA
    G_4 = P1_Graphs[4]  # G_4 is SW_H

    ### Plotting function to see if we observe power law
    #     degrees = G_4.degree()
    #     degree_values = sorted(set(degrees.values()))
    #     histogram = [list(degrees.values()).count(i)/float(nx.number_of_nodes(G_4)) for i in degree_values]

    #     plt.plot(degree_values, histogram, 'o')
    #     plt.xlabel('Degree')
    #     plt.ylabel('Fraction of Nodes')
    #     plt.xscale('log')
    #     plt.yscale('log')

    return ['PA', 'SW_L', 'SW_L', 'PA', 'SW_H']


#     return (nx.average_shortest_path_length(G_4), nx.average_clustering(G_4))
graph_identification()
# ['PA', 'SW_L', 'SW_L', 'PA', 'SW_H']


# ---
#
# ## Part 2 - Company Emails
#
# For the second part of this assignment you will be working with a company's email network where each node corresponds to a person at the company, and each edge indicates that at least one email has been sent between two people.
#
# The network also contains the node attributes `Department` and `ManagementSalary`.
#
# `Department` indicates the department in the company which the person belongs to, and `ManagementSalary` indicates whether that person is receiving a management position salary.

# In[16]:


G = nx.read_gpickle('email_prediction.txt')

print(nx.info(G))

# ### Part 2A - Salary Prediction
#
# Using network `G`, identify the people in the network with missing values for the node attribute `ManagementSalary` and predict whether or not these individuals are receiving a management position salary.
#
# To accomplish this, you will need to create a matrix of node features using networkx, train a sklearn classifier on nodes that have `ManagementSalary` data, and predict a probability of the node receiving a management salary for nodes where `ManagementSalary` is missing.
#
#
#
# Your predictions will need to be given as the probability that the corresponding employee is receiving a management position salary.
#
# The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).
#
# Your grade will be based on the AUC score computed for your classifier. A model which with an AUC of 0.88 or higher will receive full points, and with an AUC of 0.82 or higher will pass (get 80% of the full points).
#
# Using your trained classifier, return a series of length 252 with the data being the probability of receiving management salary, and the index being the node id.
#
#     Example:
#
#         1       1.0
#         2       0.0
#         5       0.8
#         8       1.0
#             ...
#         996     0.7
#         1000    0.5
#         1001    0.0
#         Length: 252, dtype: float64

# In[57]:


from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score


def salary_predictions():
    # Create a matrix of node features
    df = pd.DataFrame(index=G.nodes())
    df['Department'] = pd.Series(nx.get_node_attributes(G, 'Department'))
    df['ManagementSalary'] = pd.Series(nx.get_node_attributes(G, 'ManagementSalary'))
    df['clustering'] = pd.Series(nx.clustering(G))
    df['degree'] = pd.Series(G.degree())

    # Split data frame in 2 categories :
    # 1) with missing values (252) for predictions
    # 2) data for training
    df_missing_val = df[np.isnan(df['ManagementSalary'])]
    df_missing_val = df_missing_val.drop(['ManagementSalary'], axis=1)
    df_for_train = df.dropna()

    # Split train/test data
    X = df_for_train.drop(['ManagementSalary'], axis=1)
    y = df_for_train['ManagementSalary']
    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

    # create classifier
    clf = KNeighborsClassifier(33).fit(X_train, y_train)
    y_pred = clf.predict(X_test)

    return pd.Series(clf.predict_proba(df_missing_val)[:, 1], index=df_missing_val.index)


salary_predictions()

# ### Part 2B - New Connections Prediction
#
# For the last part of this assignment, you will predict future connections between employees of the network. The future connections information has been loaded into the variable `future_connections`. The index is a tuple indicating a pair of nodes that currently do not have a connection, and the `Future Connection` column indicates if an edge between those two nodes will exist in the future, where a value of 1.0 indicates a future connection.

# In[58]:


future_connections = pd.read_csv('Future_Connections.csv', index_col=0, converters={0: eval})
future_connections.head(10)


# Using network `G` and `future_connections`, identify the edges in `future_connections` with missing values and predict whether or not these edges will have a future connection.
#
# To accomplish this, you will need to create a matrix of features for the edges found in `future_connections` using networkx, train a sklearn classifier on those edges in `future_connections` that have `Future Connection` data, and predict a probability of the edge being a future connection for those edges in `future_connections` where `Future Connection` is missing.
#
#
#
# Your predictions will need to be given as the probability of the corresponding edge being a future connection.
#
# The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).
#
# Your grade will be based on the AUC score computed for your classifier. A model which with an AUC of 0.88 or higher will receive full points, and with an AUC of 0.82 or higher will pass (get 80% of the full points).
#
# Using your trained classifier, return a series of length 122112 with the data being the probability of the edge being a future connection, and the index being the edge as represented by a tuple of nodes.
#
#     Example:
#
#         (107, 348)    0.35
#         (542, 751)    0.40
#         (20, 426)     0.55
#         (50, 989)     0.35
#                   ...
#         (939, 940)    0.15
#         (555, 905)    0.35
#         (75, 101)     0.65
#         Length: 122112, dtype: float64

# In[81]:


def new_connections_predictions():
    # Create a matrix of features for the edges
    fc = future_connections  # rename fc for ease of use
    fc['preferential attachment'] = [i[2] for i in nx.preferential_attachment(G, fc.index)]
    fc['jaccard coefficient'] = [i[2] for i in nx.jaccard_coefficient(G, fc.index)]
    fc['resource allocation'] = [i[2] for i in nx.resource_allocation_index(G, fc.index)]
    fc['adamic adar'] = [i[2] for i in nx.adamic_adar_index(G, fc.index)]

    # Split data frame in 2 categories :
    # 1) with missing values (252) for predictions
    # 2) data for training
    fc_missing_val = fc[np.isnan(fc['Future Connection'])]
    fc_missing_val = fc_missing_val.drop(['Future Connection'], axis=1)
    fc_for_train = fc.dropna()

    # Split train/test data
    X = fc_for_train.drop(['Future Connection'], axis=1)
    y = fc_for_train['Future Connection']
    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

    # create classifier
    clf = KNeighborsClassifier(33).fit(X_train, y_train)
    y_pred = clf.predict(X_test)

    return pd.Series(clf.predict_proba(fc_missing_val)[:, 1], index=fc_missing_val.index)


new_connections_predictions()

